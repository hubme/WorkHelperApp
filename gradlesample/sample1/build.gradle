//只能以build.gradle命名，其他都不行
//一、Closure(闭包)是一段单独的代码块，它可以接收参数，返回值，也可以被赋值给变量
//1.无参数
def myClosure = {
    println("Hello World!")
}
myClosure() //执行闭包

//2.接收一个参数
def myClosureWithOneParams = {
    String str -> println str //箭头前面是参数定义，后面是执行代码，str为外部传入的参数
}
//如果只有一个参数可以用it代替，也可写作：
def myClosureWithOneParams2 = {
    println(it)
}
myClosureWithOneParams("Hello World!")

//3.接收多个参数
def myClosureWithMutiParams = {
    String str, int n -> println "$str : $n"//参数前加"$"
}
//也可以写作：
def myClosureWithMutiParams2 = {
    str, n -> println "$str : $n"
}
myClosureWithMutiParams("Hello World!", 1)

//使用变量
def var = "Hello World!"
def useVar = {
    println(var)
}
useVar()

//改变上下文
def closureContext = {
    println(var)//这时还不存在
}
MyClass myclass = new MyClass()
closureContext.setDelegate(myClass)// 改变上下文，这时Var已经有了，在执行之前改变了
closureContext()//执行闭包，输出Hello world
class MyClass{
    def var = "Hello World!"
}


//2、Gradle在默认情况下已经为Project定义了很多Property，如下：
project:Project本身
name:Project的名字
path:Project的绝对路径
description:Project的描述信息
buildDir:Project构建结果存放目录
version:Project的版本号

//通过ext来自定义Property:
ext.property1 = "this is property1"
或
ext{
    property2 = "this is property2"
}
task showProperty << {
    println(property1)
    println(property2)
}

//任何实现了ExtensionAware接口的Gradle对象都可以通过这种方式来添加额外的Property
//比如Task也实现了该接口。通过“-p”命令行参数定义Property：
task showCommandLineProperties << {
    println(propertyTest)
}

