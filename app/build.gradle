apply plugin: 'com.android.application'
apply plugin: 'com.antfortune.freeline'
apply plugin: 'checkstyle'
apply plugin: 'project-report'
apply plugin: "com.vanniktech.dependency.graph.generator"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
if (project.hasProperty("enableErrorProne")) {
    apply plugin: "net.ltgt.errorprone"
}

def cfg = rootProject.ext.android
android {
    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion
    defaultConfig {
        applicationId "com.king.app.workhelper"
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        freeline {
            hack true
            productFlavor 'dev'
        }

        //resConfigs "zh"//将语言资源限定为中文

        //打包指定cpu架构的so库.
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86"
        }

        //ARouter
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [ AROUTER_MODULE_NAME : project.getName() ]
            }
        }
    }

    //开启后会执行相应的 dataBinding task(eg: dataBindingExportBuildInfoDebug) ，引入依赖等。
    dataBinding {
        enabled = true
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    //配置签名
    signingConfigs {
        config {
            keyAlias 'feng'
            keyPassword '123456'
            storeFile file('/key/WorkHelperAppKeyStore.jks')
            storePassword '123456'
        }
    }
    buildTypes {
        release {
            // 不显示Log, 在java代码中的调用方式为：BuildConfig.LOG_DEBUG
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true//代码混淆
            shrinkResources false//移除无用的资源. AS>=2.0时设为true编译出错，使用Inspect Code代替此功能。
            zipAlignEnabled true//Zipalign优化
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config//使用签名
            manifestPlaceholders = [app_label: "Test"]
        }
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            shrinkResources false
            manifestPlaceholders = [app_label: "Test"]
//            applicationIdSuffix ".debug"
            signingConfig signingConfigs.config//使用签名
//            resValue "string", "app_label", "Test"//意为把名为app_label的string value值改为Test
        }
        //增加Build Type
        /*preview {
            signingConfig signingConfigs.config
        }*/
    }

    /*applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //app-release-official-1.0.0-20170211.apk
                def fileName = "app-${variant.buildType.name}-${variant.productFlavors[0].name}-${variant.versionName}-${releaseTime()}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }*/

    flavorDimensions "dev"
    productFlavors {
        dev {
            manifestPlaceholders = [channel: "dev"]
        }
        /*official {
            manifestPlaceholders = [channel: "official"]
        }
        wandoujia {
            manifestPlaceholders = [channel: "wandoujia"]
        }
        //flavor名如果是数字开头，必须用引号引起来
        "360" {
            manifestPlaceholders = [channel: "360"]
        }*/
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }

        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'

        //过滤掉指定的so库
        //exclude 'lib/arm64-v8a/libimagepipeline.so'
        exclude 'lib/x86/libweibosdkcore.so'
    }
    
    //需要去掉自定义的task.https://developer.android.com/studio/build/configure-apk-splits.html?hl=zh-cn#configure-abi-split
    splits {//拆分apk
        abi {//根据ABI拆分
            enable false//是否启用拆分
            reset()
            include 'armeabi', 'armeabi-v7a'//包含哪些ABI类型
            universalApk true//是否生成通用的APK
        }
    }

}

dependencies {
    //公共基础库
    implementation project(':applib')

    //表示主module和lib module 编译类型保持一致
//    releaseImplementation project(path: ':applib', configuration: 'release')
//    debugImplementation project(path: ':applib', configuration: 'debug')

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //implementation(name:'applib-0.0.1', ext:'aar')

    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testImplementation "junit:junit:$rootProject.ext.junitVersion"

    implementation "com.android.support:appcompat-v7:$rootProject.ext.supportLibVersion"
    implementation "com.android.support:palette-v7:$rootProject.ext.supportLibVersion"
    implementation "com.android.support:recyclerview-v7:$rootProject.ext.supportLibVersion"
    implementation "com.android.support:design:$rootProject.ext.supportLibVersion"
    implementation "com.android.support.constraint:constraint-layout:$rootProject.ext.constraintLayoutVersion"
    implementation 'com.android.support:multidex:1.0.3'

    //使用ButterkNife-View注入框架
    implementation 'com.jakewharton:butterknife:8.8.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.8.0'

    //EventBus
    implementation 'com.squareup:otto:1.3.8'

    implementation 'io.reactivex.rxjava2:rxjava:2.0.8'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.jakewharton.rxbinding2:rxbinding:2.0.0'

    //一以下三个依赖版本要保持一致.否则:FATAL EXCEPTION
    implementation 'com.squareup.retrofit2:retrofit:2.2.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.2.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'

    implementation 'com.squareup.okhttp3:okhttp:3.6.0'

    implementation 'com.zhy:okhttputils:2.6.2'
    //implementation 'pub.devrel:easypermissions:0.2.1'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

    debugImplementation 'com.github.markzhai:blockcanary-android:1.5.0'
    releaseImplementation 'com.github.markzhai:blockcanary-no-op:1.5.0'

    debugImplementation 'com.antfortune.freeline:runtime:0.8.8'
    releaseImplementation 'com.antfortune.freeline:runtime-no-op:0.8.8'

    implementation 'com.facebook.fresco:fresco:0.12.0'
    implementation 'com.facebook.fresco:imagepipeline-okhttp3:0.12.0'

    implementation 'com.github.bumptech.glide:glide:3.7.0'

    implementation 'com.facebook.stetho:stetho:1.5.0'
    implementation 'com.facebook.stetho:stetho-okhttp3:1.5.0'
    
    implementation 'com.google.android:flexbox:0.2.6'
    
    implementation(name: 'weibosdk-1.0.0', ext: 'aar')

    //NPE检测工具 https://github.com/uber/NullAway
    annotationProcessor "com.uber.nullaway:nullaway:0.2.1"

//    implementation 'com.alibaba:fastjson:1.1.61.android'

    //https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx
    // https://github.com/JakeWharton/hugo
//    implementation 'org.aspectj:aspectjrt:1.8.10'

    implementation 'com.google.flatbuffers:flatbuffers-java:1.8.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.ext.kotlin_version"

    //https://google.github.io/dagger/
    implementation 'com.google.dagger:dagger:2.7'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.7'

    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.1.0-alpha-14'
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.1.0-alpha-14'

    implementation 'android.arch.lifecycle:common-java8:1.1.1'
    
    //图片压缩
//    implementation 'top.zibin:Luban:1.1.8'

    compile 'com.alibaba:arouter-api:1.4.1'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.2'
}

checkstyle {
    toolVersion '6.1.1'
    showViolations true
}

check.dependsOn 'checkstyle'

task checkstyle(type: Checkstyle) {
    source 'src'
    configFile file("config/checkstyle.xml")
    include '**/*.java'
    exclude '**/gen/**'
    ignoreFailures true

    classpath = files()
}

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
    mavenCentral()
}

static def releaseTime() {
    return new Date().format("yyyyMMdd", TimeZone.getTimeZone("UTC"))
}