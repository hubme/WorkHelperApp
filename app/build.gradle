import com.king.versionplugin.*

apply plugin: 'com.android.application'
apply plugin: 'project-report'
apply plugin: "com.vanniktech.dependency.graph.generator"
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'dagger.hilt.android.plugin'

android {
    compileSdkVersion Basic.compileSdkVersion
    buildToolsVersion Basic.buildToolsVersion
    defaultConfig {
        applicationId Basic.applicationId
        minSdkVersion Basic.minSdkVersion
        targetSdkVersion Basic.targetSdkVersion
        versionCode Basic.versionCode
        versionName Basic.versionName
        buildConfigField "String", "GIT_SHA", "\"${getGitSha()}\""
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true

        //资源限定为指定的语言
        resConfigs "zh", "en"

        //打包指定cpu架构的so库.
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a", "x86"
        }

    }

    //开启后会执行相应的 dataBinding task(eg: dataBindingExportBuildInfoDebug) ，引入依赖等。
    buildFeatures {
        dataBinding true
        viewBinding true
    }

    aaptOptions {
        //关闭 aapt 对 png 的优化
        cruncherEnabled = false
    }

    //配置签名
    signingConfigs {
        config {
            keyAlias 'feng'
            keyPassword '123456'
            storeFile file('./key/WorkHelperAppKeyStore.jks')
            storePassword '123456'
        }
    }
    buildTypes {
        release {
            // 不显示Log, 在java代码中的调用方式为：BuildConfig.LOG_DEBUG
            buildConfigField "boolean", "LOG_DEBUG", "false"
            minifyEnabled true//代码混淆
            shrinkResources false//移除无用的资源. AS>=2.0时设为true编译出错，使用Inspect Code代替此功能。
            zipAlignEnabled true//Zipalign优化
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config//使用签名
            manifestPlaceholders = [app_label: "Test", git_sha: "${getGitSha()}"]
        }
        debug {
            buildConfigField "boolean", "LOG_DEBUG", "true"
            minifyEnabled false
            shrinkResources false
            manifestPlaceholders = [app_label: "Test", git_sha: "${getGitSha()}"]
//            applicationIdSuffix ".debug"
            signingConfig signingConfigs.config//使用签名
//            resValue "string", "app_label", "Test"//意为把名为app_label的string value值改为Test
        }
        //增加Build Type
        /*preview {
            signingConfig signingConfigs.config
        }*/
    }

    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputApk = output.outputFile
            if (outputApk != null && outputApk.name.endsWith('.apk')) {
                //app-release-official-1.0.0-20170211.apk
                output.outputFileName = "app-${variant.buildType.name}-${variant.productFlavors[0].name}-${variant.versionName}-${getGitSha()}-${getGitShaCount()}.apk"
            }
        }
    }

    flavorDimensions "dev"
    productFlavors {
        dev {
            manifestPlaceholders = [channel: "dev"]
        }
        /*official {
            manifestPlaceholders = [channel: "official"]
        }
        wandoujia {
            manifestPlaceholders = [channel: "wandoujia"]
        }
        //flavor名如果是数字开头，必须用引号引起来
        "360" {
            manifestPlaceholders = [channel: "360"]
        }*/
    }

    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }

        main.java.srcDirs += 'src/main/kotlin'
    }

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'

        //过滤掉指定的so库
        //exclude 'lib/arm64-v8a/libimagepipeline.so'
        exclude 'lib/x86/libweibosdkcore.so'
    }

    //需要去掉自定义的task.https://developer.android.com/studio/build/configure-apk-splits.html?hl=zh-cn#configure-abi-split
    splits {//拆分apk
        abi {//根据ABI拆分
            enable false//是否启用拆分
            reset()
            include 'armeabi', 'armeabi-v7a'//包含哪些ABI类型
            universalApk true//是否生成通用的APK
        }
    }

    lintOptions {
        abortOnError false
    }
}

dependencies {
    //公共基础库
    implementation project(':applib')
    //implementation project(':apt-annotations')
    //kapt project(':apt-compiler')

    //implementation project(':permission')

    //表示主module和lib module 编译类型保持一致
    /*releaseImplementation project(path: ':applib', configuration: 'release')
    debugImplementation project(path: ':applib', configuration: 'debug')

    debugCompile(name: 'applib-debug', ext: 'aar')
    releaseCompile(name: 'applib-release', ext: 'aar')

    debugImplementation files('libs/applib-debug.aar')
    releaseImplementation files('libs/applib-release.aar')*/

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //implementation(name:'applib-0.0.1', ext:'aar')

    testImplementation TestDep.junit
    testImplementation KotlinDep.kotlinx_coroutines_test
    androidTestImplementation AndroidXDep.android_junit
    androidTestImplementation AndroidXDep.espresso_core

    implementation AndroidXDep.lifecycle_livedata
    implementation AndroidXDep.lifecycle_viewmodel_ktx
    implementation AndroidXDep.lifecycle_common_java8
    implementation AndroidXDep.lifecycle_process
    implementation AndroidXDep.webkit

    implementation ThirdDep.butterknife
    kapt ThirdDep.butterknife_compiler

    implementation ThirdDep.rxjava
    implementation ThirdDep.rxandroid
    implementation ThirdDep.rxbinding

    //一以下三个依赖版本要保持一致.否则:FATAL EXCEPTION
    implementation ThirdDep.retrofit
    implementation ThirdDep.converter_gson
    implementation ThirdDep.adapter_rxjava2

    implementation ThirdDep.okhttp

    debugImplementation ThirdDep.leakcanary_android

    //debugImplementation ThirdDep.blockcanary_android
    //releaseImplementation ThirdDep.blockcanary_no_op

    implementation ThirdDep.fresco
    implementation ThirdDep.imagepipeline_okhttp3

    implementation ThirdDep.glide
    implementation ThirdDep.glide_okhttp3_integration
    kapt ThirdDep.glide_compiler

    //implementation ThirdDep.stetho
    //implementation ThirdDep.stetho_okhttp3

    implementation(name: 'weibosdk-1.0.0', ext: 'aar')

    //https://github.com/HujiangTechnology/gradle_plugin_android_aspectjx
    // https://github.com/JakeWharton/hugo
//    implementation 'org.aspectj:aspectjrt:1.8.10'

    // implementation ThirdDep.dagger_android
    // kapt ThirdDep.dagger_compiler

    implementation ThirdDep.hilt_android
    kapt ThirdDep.hilt_android_compiler

    implementation ThirdDep.arouter_api
    kapt ThirdDep.arouter_compiler

    implementation ThirdDep.calendarview

    //debugImplementation dependency.doraemonkit
    //releaseImplementation dependency.doraemonkit_no_op

    implementation GoogleDep.flexbox
    // 使用 Firebase Android BoM，可确保您的应用始终使用 Firebase Android 库的兼容版本。
    implementation platform('com.google.firebase:firebase-bom:28.1.0')
    //implementation platform(GoogleDep.firebase_bom)
    implementation GoogleDep.firebase_analytics
    implementation GoogleDep.firebase_crashlytics

    debugImplementation ThirdDep.soloader
    debugImplementation ThirdDep.flipper
    releaseImplementation ThirdDep.flipper_noop

    implementation "com.google.dagger:hilt-android:2.41"
    kapt "com.google.dagger:hilt-android-compiler:2.41"

}

kapt {
    arguments {
        arg("AROUTER_MODULE_NAME", project.getName())
    }
}

repositories {
    flatDir {
        dirs 'libs' //this way we can find the .aar file in libs folder
    }
    mavenCentral()
}

static def releaseTime() {
    return new Date().format("yyyyMMdd_HHmmss", TimeZone.getDefault())
}

static def getGitSha() {
    return 'git rev-parse --short HEAD'.execute().text.trim()
}

static def getGitShaCount() {
    return 'git rev-list HEAD --first-parent --count'.execute().text.trim()
}